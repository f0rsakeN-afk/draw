// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LikeType {
  LIKE
  DISLIKE
}

model User {
  id                        String       @id @default(uuid())
  name                      String
  email                     String       @unique
  otp                       String?
  otpExpires                DateTime?
  isVerified                Boolean      @default(false)
  password                  String
  passwordResetToken        String?
  passwordResetTokenExpires DateTime?
  createdAt                 DateTime     @default(now())
  updatedAt                 DateTime     @updatedAt
  videos                    Video[]
  watchLater                WatchLater[]
  playLists                 PlayList[]
  comments                  Comment[]
  likedVideos               VideoLike[]
}

model Video {
  id           String   @id @default(cuid())
  title        String
  description  String
  videoUrl     String
  thumbnailUrl String
  views        Int      @default(0)
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  category     Category @relation(fields: [categoryId], references: [id])
  categoryId   String

  createdAt  DateTime         @default(now())
  watchLater WatchLater[]
  playlists  PlayListVideos[]
  comments   Comment[]
  likes      VideoLike[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  video     Video    @relation(fields: [videoId], references: [id])
  videoId   String
}

model VideoLike {
  id      String   @id @default(cuid())
  type    LikeType
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  video   Video    @relation(fields: [videoId], references: [id])
  videoId String

  @@unique([videoId, userId])
}

model Category {
  id   String @id @default(cuid())
  name String @unique

  videos Video[]
}

model WatchLater {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  video     Video    @relation(fields: [videoId], references: [id])
  videoId   String
  createdAt DateTime @default(now())

  @@unique([userId, videoId])
}

model PlayList {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())

  user   User             @relation(fields: [userId], references: [id])
  userId String
  videos PlayListVideos[]
}

model PlayListVideos {
  id         String   @id @default(cuid())
  playlist   PlayList @relation(fields: [playlistId], references: [id])
  playlistId String

  video   Video  @relation(fields: [videoId], references: [id])
  videoId String

  @@unique([playlistId, videoId])
}
