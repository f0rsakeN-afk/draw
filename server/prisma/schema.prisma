// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LikeType {
  LIKE
  DISLIKE
}

// For search functionality
enum SearchType {
  VIDEO
  CHANNEL
  PLAYLIST
}

// Video visibility status
enum VideoStatus {
  PUBLIC
  UNLISTED
  PRIVATE
}

model User {
  id                        String         @id @default(uuid())
  name                      String
  email                     String         @unique
  role                      String         @default("user") // user, admin, superadmin
  otp                       String?
  otpExpires                DateTime?
  otpSentAt                 DateTime?      @default(now())
  isVerified                Boolean        @default(false)
  password                  String
  passwordResetToken        String?
  passwordResetTokenExpires DateTime?
  createdAt                 DateTime       @default(now())
  updatedAt                 DateTime       @updatedAt
  videos                    Video[]
  watchLater                WatchLater[]
  playLists                 PlayList[]
  comments                  Comment[]
  likedVideos               VideoLike[]
  subscriptions             Subscription[] @relation("Subscriber")
  subscribers               Subscription[] @relation("SubscribedTo")
}

model Subscription {
  id             String   @id @default(cuid())
  subscriber     User     @relation("Subscriber", fields: [subscriberId], references: [id])
  subscriberId   String
  subscribedTo   User     @relation("SubscribedTo", fields: [subscribedToId], references: [id])
  subscribedToId String
  createdAt      DateTime @default(now())

  @@unique([subscriberId, subscribedToId])
}

model Video {
  id          String      @id @default(cuid())
  title       String
  description String?
  url         String
  thumbnail   String?     // Thumbnail URL
  duration    Int?        // Video duration in seconds
  views       Int         @default(0)
  isPublished Boolean     @default(false)
  isFeatured  Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  category    Category?   @relation(fields: [categoryId], references: [id])
  categoryId  String?
  
  // Related data
  comments    Comment[]
  likes       VideoLike[]
  playlists   PlayListVideos[]
  watchLater  WatchLater[]
  
  // Indexes for better query performance
  @@index([userId])
  @@index([categoryId])
  @@index([isPublished])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  video   Video  @relation(fields: [videoId], references: [id])
  videoId String
  
  // For nested comments
  parentId   String?  @default("")  // Empty string instead of null
  parent     Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies    Comment[] @relation("CommentReplies")
  
  // Comment likes
  likes     CommentLike[]
  
  @@index([videoId])
  @@index([userId])
  @@index([parentId])
}

model CommentLike {
  id        String   @id @default(cuid())
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
  type      LikeType @default(LIKE)
  
  @@unique([userId, commentId])
}

model VideoLike {
  id      String   @id @default(cuid())
  type    LikeType
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  video   Video    @relation(fields: [videoId], references: [id])
  videoId String

  @@unique([videoId, userId])
}

model Category {
  id   String @id @default(cuid())
  name String @unique

  videos Video[]
}

model WatchLater {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  video     Video    @relation(fields: [videoId], references: [id])
  videoId   String
}

model PlayList {
  id          String           @id @default(cuid())
  name        String
  description String?
  isPublic    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  user        User             @relation(fields: [userId], references: [id])
  userId      String
  videos      PlayListVideos[]
  
  @@index([userId])
}

model PlayListVideos {
  id         String   @id @default(cuid())
  playlist   PlayList @relation(fields: [playlistId], references: [id])
  playlistId String
  video      Video    @relation(fields: [videoId], references: [id])
  videoId    String
  addedAt    DateTime @default(now())
  position   Int      @default(0)

  @@unique([playlistId, videoId])
  @@index([playlistId])
  @@index([videoId])
}
